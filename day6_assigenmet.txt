_____________FOR Loop_________________________________________
1)Print the table of 2

$ cat printtable.sh
#!/bin/bash
read -p "Enter the number" no
for (( i=1; i<=no; i++ ))
do
        echo "2*$i=" $(( 2*$i ))
done

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/forloop (master)
$ ./printtable.sh
Enter the number6
2*1= 2
2*2= 4
2*3= 6
2*4= 8
2*5= 10
2*6= 12
---------------------------------------------------------------------
2)Harmonic number

$ cat harmonic.sh
#!/bin/bash -x
echo "1+1/2+1/3+......+1/n="
read -p "enter the number " no
echo $no
sum=0
for (( i=1; i <=$no; i++ ))
do
        term = $(( 1/$i ))
        sum = $(( $sum + $term))
done
echo "Sum is: " $sum

-------------------------------------------------
3)Prime number

$ cat Prime.sh
#!/bin/bash
read -p "enter the number" no
y=0
for (( i=2; i<=$(($no/2)); i++ ))
do
if [ $(( $no % $i )) == 0 ]
        then
                        ((y++))
        fi
done
if [ $y == 0 ]
then
                echo "prime number"
else
                echo "not prime"
fi

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/forloop (master)
$ ./Prime.sh
enter the number19
prime number

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/forloop (master)
$ ./Prime.sh
enter the number191
prime number

-------------------------------------------------------------------------------
4) print the prime number in range

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/forloop (master)
$ cat Prime_range.sh
#!/bin/bash
read -p "lower input" lower
read -p "upper input" upper
for (( i=$lower; i<=$upper; i++))
do
y=0
for (( j=2; j<=$(($i/2)); j++))
do
if [ $(( $i % $j )) == 0 ]
        then
                        ((y++))
        fi
done
if (( y==0 && i!=1 ))
then
        echo $i
fi
done

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/forloop (master)
$ ./Prime_range.sh
lower input1
upper input60
2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59

---------------------------------------------------------------------
5)Factorial program 

$ cat Factorial.sh
#!/bin/bash
read -p "enter the no " number
fact=1
for (( i=1; i<=$number; i++))
do
        fact=$[ $fact*$i ]
done
echo "Factorial is :"$fact

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/forloop (master)
$ ./Factorial.sh
enter the no 5
Factorial is :120



-----------------------------------------------------------------------------------
6) Prime factorization

$ cat PrimeFactorial.sh
#!/bin/bash
read -p "enter the no " no

for (( i=2; i<$no; i++))
do
                if [ $(( $no%$i )) == 0 ]
                then
                                echo $i
                                no=$(( $no/$i ))
                fi
done
echo "$no"

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/forloop (master)
$ ./PrimeFactorial.sh
enter the no 19
19

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/forloop (master)
$ ./PrimeFactorial.sh
enter the no 12
2
3
2

------------------------------------------------------------------------------------------------
___________________________WHILE LOOP_____________________________________________________________________________
1)program of power pf 2 till 256

$ cat Two_power_256.sh
#!/bin/bash
read -p "enter the no " n
result=1
count=1
while [[ $result -lt 256 && $count -lt $n ]]
do
        result=$(( 2* $(($result)) ))
        echo "$result"
        ((count++))
done

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/While_loop (master)
$ ./Two_power_256.sh
enter the no 10
2
4
8
16
32
64
128
256

----------------------------------------------------------------------------------------------------------------------------
2)magic number
$ cat magic_number.sh
#!/bin/bash
num=0
function ismagic
{
        num=$1
        if [ $(($num%9)) -eq 1 ]
        then
                echo "is magic number"
        else
                echo "is not magic number"
        fi
}


start=1
end=100
echo "think the number in your mind between 1 to 100 :"
flag=0
while [ $flag = 0 ]
do
        middle=$(( $(( $start+$end)) / 2 ))
        echo "1.my numberis :"$middle
        echo "2.Is your number is less than my number "
        echo "3.is your number is greater than my number"
        echo "check your number"
        read -p "enter your choice" choice
        case $choice  in
        1)
        echo "your no is $middle"
        ismagic $middle
        break
        ;;
        2)
        end=$middle
        ;;
        3)
        start=$middle
        ;;
        *)
        echo "invaild choice"
        ;;
        esac
done

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/While_loop (master)
$ ./magic_number.sh
think the number in your mind between 1 to 100 :
1.my numberis :50
2.Is your number is less than my number
3.is your number is greater than my number
check your number
enter your choice2
1.my numberis :25
2.Is your number is less than my number
3.is your number is greater than my number
check your number
enter your choice2
1.my numberis :13
2.Is your number is less than my number
3.is your number is greater than my number
check your number
enter your choice3
1.my numberis :19
2.Is your number is less than my number
3.is your number is greater than my number
check your number
enter your choice1
your no is 19
is magic number




----------------------------------------------------------------------------------------------------------------------------
3)Coin flip 11 times

$ cat flip_coin.sh
#!/bin/bash
Head_count=0
Tail_count=0
while [[ $Head_count -lt 11 && $Tail_count -lt 11 ]]
do
Flip=$((RANDOM%2))
if [[ $Flip -eq 0 ]]
then
        echo "heads"
        ((Head_count++))
else
        echo "Tails"
        ((Tail_count++))
fi
done
if(($Head_count==11))
then
        echo "Head wins"
else
        echo "Tails wins"
fi

Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/While_loop (master)
$ ./flip_coin.sh
Tails
heads
heads
Tails
Tails
Tails
Tails
heads
Tails
Tails
Tails
Tails
heads
heads
Tails
heads
Tails
Tails wins


---------------------------------------------------------------------------------------------------------------------------
4)gambler 100 and 1 rs bet

$ cat gamble.sh
#!/bin/bash
money=100
bet=0
win=0
lose=0
while [ True ]
do
bet=$(())
money=$(())
result=$((RANDOM%2))
if [ $result -eq 1 ]
then
                echo "WIN"
                money=$(($money+1))
                win=$(($win+1))
elif [ $result -le 0 ]
then
                echo "LOSE"
                money=$(($money-5))
                lose=$(($lose+1))
fi
if [ $money -ge 200 ]
then
                echo "money " $money
                echo "You Win"
                echo "Win: "$win
                echo "bets :"$bet
                echo "lose :"$lose
elif [ $money -le 0 ]
then
                echo "money " $money
      echo "You Lose"
      echo "Win: "$win
      echo "bets :"$bet
      echo "lose :"$lose

elif [ $bet -eq 100 ]
then
                echo "money " $money
      echo "Limit over"
      echo "Win: "$win
      echo "bets :"$bet
      echo "lose :"$lose

fi
                        echo "Money :" $money
done


Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/While_loop (master)
$ ./gamble.sh
WIN
Money : 1
WIN
Money : 1
WIN
Money : 1
WIN
Money : 1
LOSE
money  -5
You Lose
Win: 4
bets :0
lose :1
Money : -5
LOSE
money  -5
You Lose
Win: 4
bets :0
lose :2
Money : -5
LOSE
money  -5
You Lose
Win: 4
bets :0
lose :3


---------------------------------------------------------------------------------------
________________________FUNCTION___________________________________________________________________________________________________
1)Temp Conversion
-------------------------------------------------------------------------------------------------------------------------------------------------
2)Palindrome

$ cat palindrome.sh
#!/bin/bash
read -p "enter the 1st number: " num1
num2=$num1
id=0

function palindrome()
{
        while [[ $num1 -ne 0 ]]
        do
        id=$(($num1%10))
        num1=$(($num1/10))
        rev=$(echo ${rev}${id} )
        done

        if [ $num2 -eq $rev ]
        then
                echo "palindrome"
        else
                echo "not palindrome"
        fi
}
result=$(palindrome $num1 )
echo "number is: "$result


Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/function (master)
$ ./palindrome.sh
enter the 1st number: 1991
number is: palindrome


-----------------------------------------------------------------------------------------------------------------------------------------------------
3)Prime palindrome

$ cat prime_palindrome.sh
#!/bin/bash
read -p  "enter the number: " number
count=0
function primeNo()
{

for (( i=2; i <= $(( $number-1 )); i++ ))
do
        if [ $(( $number % $i )) == 0 ]
   then
      ((count++))
   fi
done
if [ $count == 0 ]
then
                echo "prime number"
else
                echo "not prime"
fi
}

function palindromeNo()
{
temp=$number
sum=0
while [[ $temp > 0 ]]
do
        id=$(( $temp % 10 ))
        sum=$(( $sum * 10 + $id ))
        temp=$(( $temp / 10 ))
done
                if [ $sum -eq $number ]
                then
                                echo "The number is pallindorme"
                else
                                echo "The not is pallindrome "
                fi
}
function primePalindrome()
{
                if [[ $count == 0 ]]  && [[ $sum -eq $number ]]
                then
                                echo "prime number is palindrome"
                else
                                echo "prime number is not palindrome"
                fi
}
result1=$(primeNo)
echo  $result1
result2=$(palindromeNo)
echo $result2
result3=$(primePalindrome)
echo $result3


Akshay Patil@DESKTOP-RQ9TU4G MINGW64 ~/TerminalCommands/linux-content/assignment/function (master)
$ ./prime_palindrome.sh
enter the number: 97
prime number
The not is pallindrome
prime number is not palindrome

-----------------------------------------------------------------------------------------------------------------------------------